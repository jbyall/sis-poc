@model SIS.Domain.Item

@{
    ViewBag.Title = "Edit Item Locations";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div style="max-width:650px;margin:0 auto;">
        <h3>Edit Item Locations</h3>

        <div class="panel-group">
            <div class="panel panel-default panel-sis">
                <div class="panel-heading panel-heading-sis">
                    <div class="row">
                        <div class="col-md-3 col-sm-3">
                            @Html.HiddenFor(model => model.Id)
                            @Html.LabelFor(model => model.Id, "Item Number", htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.Id)
                        </div>
                        <div class="col-md-3 col-sm-3">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.Name)
                        </div>
                        <div class="col-md-3 col-sm-3">
                            @Html.LabelFor(model => model.Unit, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.Unit)
                        </div>
                        <div class="col-md-3 col-sm-3">
                            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.Price)
                        </div>
                    </div>
                </div>
                <div class="panel-body">
                    <div class="demo-container">
                        <div id="gridContainer"></div>
                    </div>
                    @*<table class="table table-sis">
                            <thead>
                                <tr>
                                    <th>Location</th>
                                    <th>Qty On Hand</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.ItemLocations)
                                {
                                    <tr>
                                        <td>@Html.DisplayFor(modelItem => item.LocationId)</td>
                                        <td><a href="/"</td>
                                    </tr>
                                }
                            </tbody>
                        </table>*@
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        // Function for loading data in the table
        $(function () {
            var getDataSource = function () {
                var timeOut = null;
                var updateTasks = [];
                var insertTasks = [];
                var deleteTasks = [];

                // Function to execute ajax requests for edits
                var pushEdits = function () {
                    //Ajax call for each location to update (i.e. move)
                    $.each(updateTasks, function (index, task) {
                        task.deferred.resolve(
                            $.ajax({
                                url: "/Items/UpdateLocation/" + task.key,
                                type: "POST",
                                data: JSON.stringify(task.values),
                                contentType: 'application/json',
                                success: function (result) {
                                    task.deferred.resolve(result);
                                    //location.reload();
                                },
                                error: function (resp) {
                                    task.deferred.reject("Data Loading Error");
                                },
                                timeout: 5000
                            })
                        );
                    });
                    updateTasks = [];
                    timeOut = null;

                    //Ajax call for each location to insert (i.e. add new location)
                    $.each(insertTasks, function (index, task) {
                        task.deferred.resolve(
                            $.ajax({
                                url: "/Items/AddLocation/" + task.key,
                                type: "POST",
                                data: JSON.stringify(task.key),
                                contentType: 'application/json',
                                success: function (result) {
                                    return task.deferred.resolve(result);
                                    //location.reload();
                                },
                                error: function (resp) {
                                    task.deferred.reject("Data Loading Error");
                                },
                                timeout: 5000
                            })
                        );
                    });
                    insertTasks = [];
                    timeOut = null;

                    //Ajax call for each locaiton to delete
                    $.each(deleteTasks, function (index, task) {
                        task.deferred.resolve(
                            $.ajax({
                                url: "/Items/RemoveLocation/",
                                type: "POST",
                                data: JSON.stringify(task.key),
                                contentType: 'application/json',
                                success: function (result) {
                                    task.deferred.resolve(result);
                                    //location.reload();
                                },
                                error: function (resp) {
                                    task.deferred.reject("Data Loading Error");
                                },
                                timeout: 5000
                            })
                        );
                    });
                    deleteTasks = [];
                    timeOut = null;
                };
                var updated = false;
                var settings = {
                    //key: 'LocationId',
                    load: function (loadOptions) {
                        var d = $.Deferred();
                        args = {};

                        if (loadOptions.sort) {
                            args.orderby = loadOptions.sort[0].selector;
                            if (loadOptions.sort[0].desc)
                                args.orderby += " desc";
                        }

                        args.skip = loadOptions.skip || 0;
                        args.take = loadOptions.take || 12;
                        var itemId = $('#Id').val();

                        // Ajax call to the controller to get the data
                        $.ajax({
                            url: "/Items/LocationsData/" + itemId,
                            type: "GET",
                            data: args,
                            success: function (result) {
                                d.resolve(result, { totalCount: result.length });
                            },
                            error: function (resp) {
                                console.log(resp);
                                d.reject("Data Loading Error");
                            },
                            timeout: 5000
                        });
                        return d.promise();
                    },
                    // Called when a row is updated and saved
                    update: function (key, values) {
                        if (!timeOut) {
                            timeOut = setTimeout(pushEdits, 100);
                        }
                        values["ItemId"] = key.ItemId;
                        var d = new $.Deferred();
                        updateTasks.push({
                            key: key.LocationId,
                            values: values,
                            deferred: d
                        });
                        return d.promise();
                    },
                    // Called when a row is inserted and saved
                    insert: function (key, values) {
                        if (!timeOut) {
                            timeOut = setTimeout(pushEdits, 100);
                        }
                        key["ItemId"] = $('#Id').val();
                        var d = new $.Deferred();
                        insertTasks.push({
                            key: key,
                            deferred: d
                        });
                        return d.promise();
                        //store.reload();
                        //var test = d.promise();
                    },
                    // Called when a row is removed
                    remove: function (key, values) {
                        if (!timeOut) {
                            timeOut = setTimeout(pushEdits, 100);
                        }
                        var d = new $.Deferred();
                        deleteTasks.push({
                            key: key,
                            deferred: d
                        });
                        return d.promise();
                    }
                };
                return new DevExpress.data.DataSource(settings);
            }

            function getLocations() {
                
            }

            var loations = new DevExpress.data.CustomStore({
                byKey: function (key) {
                    return key;
                },
                load: function (loadOptions) {
                    var deferred = $.Deferred();
                    $.ajax({
                        url: "/Locations/IndexData",
                        type: "GET",
                        success: function (result) {
                            deferred.resolve(result, { totalCount: result.length });
                        },
                        error: function (resp) {
                            deferred.reject("There was a problem. Please contact technical support with Error Code: HDT404.");
                            //console.log(resp);
                        },
                        timeout: 5000
                    });
                    return deferred.promise();
                }
            });

            // Main data grid
            $("#gridContainer").dxDataGrid({
                dataSource: getDataSource(),
                keyExpr: "LocationId",
                editing: {
                    mode: "row",
                    allowUpdating: true,
                    allowDeleting: true,
                    allowAdding: true,
                    texts: {
                        addRow: 'Add location'
                    }
                },
                columns: [
                    {
                        caption: "Location",
                        dataField: "LocationId",
                        lookup: {
                            dataSource: loations,
                            valueExpr: 'Id',
                            displayExpr: 'Id'
                        },
                        validationRules: [{
                            type: "custom",
                            validationCallback: function (selection) {
                                var grid = $('#gridContainer').dxDataGrid("instance");

                                // Don't show validation message if grid has no edits'
                                if (!grid.hasEditData()) {
                                    return true;
                                }

                                // Create array of existing keys
                                var rows = grid.getVisibleRows();
                                var existingKeys = [];
                                $.each(rows, function (_, row) {
                                    existingKeys.push(row.data.LocationId);
                                });

                                // Check if the array returns more than 1
                                var result = existingKeys.indexOf(selection.data.LocationId) === existingKeys.lastIndexOf(selection.data.LocationId);
                                return result;
                                
                            },
                            message: "Location already exists."
                        }]
                    },
                    { caption: "Qty On Hand", dataField: "QuantityOnHand", allowEditing: false },

                ],
                onToolbarPreparing: function (e) {
                    var toolbarItems = e.toolbarOptions.items;
                    $.each(toolbarItems, function (_, item) {
                        console.log(item);
                        item.showText = "always";
                    });
                }
            }).dxDataGrid("instance");
        });
        
    </script>
}