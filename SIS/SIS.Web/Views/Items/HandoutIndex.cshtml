@{
    ViewBag.Title = "Hand Out";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Handout Items</h2>

<div class="dx-viewport">
    <div class="alert alert-info">
        <strong>Instructions</strong>
        <ol>
            <li>Use the search at the top of each column to find your item</li>
            <li>Click the arrow in the first column to view item details and issue a handout transaction.</li>
        </ol>
    </div>
    <div class="demo-container">
        <div id="gridContainer"></div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        // Function for loading data in the table
        $(function () {
            var items = new DevExpress.data.CustomStore({
                load: function (loadOptions) {
                    console.log(loadOptions);
                    var deferred = $.Deferred(),
                        args = {};

                    if (loadOptions.sort) {
                        args.orderby = loadOptions.sort[0].selector;
                        if (loadOptions.sort[0].desc)
                            args.orderby += " desc";
                    }

                    args.skip = loadOptions.skip || 0;
                    args.take = loadOptions.take || 12;

                    // Ajax call to the controller to get the data
                    $.ajax({
                        url: "/Items/HandoutData",
                        type: "GET",
                        data: args,
                        success: function (result) {
                            console.log(result);
                            deferred.resolve(result, { totalCount: result.length });
                        },
                        error: function (resp) {
                            console.log(resp);
                            deferred.reject("Data Loading Error");
                        },
                        timeout: 5000
                    });

                    return deferred.promise();
                }
            });

            // Main data grid
            $("#gridContainer").dxDataGrid({
                allowColumnResizing: true,
                columnResizingMode: 'nextColumn',
                columnAutoWidth: true,
                filterRow: {
                    visible: true,
                    applyFilter: "auto"
                },
                dataSource: {
                    store: items
                },
                //editing: {
                //    mode: "form",
                //    allowUpdating: true,
                //    texts: {
                //        editRow: "Hand Out",
                //        saveRowChanges: "Submit"
                //    }
                //},
                //remoteOperations: {
                //    sorting: false,
                //    paging: false
                //},
                paging: {
                    pageSize: 20
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 20, 50, 100],
                    showNavigationButtons: true,
                    showInfo: true,
                    visible: true
                },
                columns: [
                    { caption: "Item Number", dataField: "Id" },
                    "Name",
                    //{ caption: "Supplier", dataField: "Supplier.Name" },
                    { caption: "Unit Price", width: 100, dataField: "Price", dataFormat: "currency" },
                    {
                        caption: "On Hand", width: 75, fixed: false,
                        calculateCellValue: function (rowData) {
                            var count = 0;
                            for (var i = 0; i < rowData.ItemLocations.length; i++) {
                                count = count + rowData.ItemLocations[i].QuantityOnHand;
                            }
                            return count;
                        },
                        calculateFilterExpression: function (filterValue, selectedFilterOperation) {
                            return [this.calculateCellValue, selectedFilterOperation || '=', filterValue]
                        }
                    },
                    { caption: "Unit", width: 75, dataField: "Unit" },
                    {
                        caption: "", cellTemplate: function (element, info) {
                            console.log(element);
                            console.log(info);
                            element.append(`<a href="/Transactions/Handout/${info.key.Id}">Hand Out</div>`)
                        }
                    }
                ],
                // Detail view for items (shown/expanded when arrow in left column is clicked)
                masterDetail: {
                    enabled: true,
                    template: function (container, info) {
                        var itemData = info.data;
                        $('<div class="container-fluid">')
                            .append(`<h3>${itemData.Name} Details</h3>`)
                            .append(`<div class="row">
                                        <div class="col-md-2 col-sm-2 text-right">
                                            <label>Item Number:</label>
                                        </div>
                                        <div class="col-md-2 col-sm-2">${itemData.Id}</div>
                                        <div class="col-md-2 col-sm-2">
                                            <a href="/Transactions/Handout/${itemData.Id}" class="btn btn-default">Hand Out</a>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-2 col-sm-2 text-right"><label>Name:</label></div>
                                        <div class="col-md-2 col-sm-2">${itemData.Name}</div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-2 col-sm-2 text-right"><label>Unit:</label></div><div class="col-md-2 col-sm-2">${itemData.Unit}</div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-2 col-sm-2 text-right"><label>Unit Cost:</label></div><div class="col-md-2 col-sm-2">${itemData.Price}</div>
                                    </div>
                                    <h4>Locations</h4>
                                    `).appendTo(container);
                        $("<div>")
                            // Item location data grid (shown when detail view is expanded)
                            .dxDataGrid({
                                columnAutoWidth: true,
                                showBorders: true,
                                hoverStateEnabled: false,
                                dataSource: itemData.ItemLocations,
                                columns: [
                                    { caption: "Location", width: 150, dataField: "LocationId" },
                                    { caption: "Qty Avail.", width: 150, dataField: "QuantityOnHand" },
                                ],
                            }).appendTo(container);
                    }
                }
            }).dxDataGrid("instance");
        });
    </script>


}
