@model SIS.Web.Models.HandoutViewModel

@{
    ViewBag.Title = "Hand Out";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Handout Transaction</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <hr />
    <div class="form-horizontal">
        @Html.HiddenFor(model => model.ItemId)
        @Html.HiddenFor(model => model.ItemPrice)

        @Html.HiddenFor(model => model.LocationType)
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="panel-group">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <div class="row">
                        <div class="col-md-10">
                            <h3>Item Details</h3>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 col-sm-3">
                            @Html.LabelFor(model => model.ItemId, "Item Number", htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.ItemId)
                        </div>
                        <div class="col-md-3 col-sm-3">
                            @Html.LabelFor(model => model.ItemName, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.ItemName)
                        </div>
                        <div class="col-md-3 col-sm-3">
                            @Html.LabelFor(model => model.ItemUnit, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.ItemUnit)
                        </div>
                        <div class="col-md-3 col-sm-3">
                            @Html.LabelFor(model => model.ItemPrice, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.ItemPrice)
                        </div>
                    </div>
                </div>
                <div class="panel-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Location</th>
                                <th>Qty On Hand</th>
                                <th>Hand Out Qty</th>
                            </tr>
                        </thead>
                        <tbody>
                            @*@{ var i = 0;}
                            @foreach (var item in Model.Transactions)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.Location.LocationId)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Location.QuantityOnHand)</td>
                                    <td>
                                        <div class="col-md-2">
                                            @Html.EditorFor(modelItem => item.HandOutQuantity, new { htmlAttributes = new { @class = "form-control", @id=$"hoq-{i}" } })
                                            @Html.ValidationMessageFor(modelItem => item.HandOutQuantity, "", new { @class = "text-danger" })
                                        </div>
                                    </td>
                                </tr>
                                i++;
                            }*@
                            @for (int i = 0; i < Model.Transactions.Count; i++)
                            {
                                @Html.HiddenFor(model => model.Transactions[i].Location.LocationId)
                                //var location = Model.ItemLocations.ToList()[i];
                                <tr>
                                    <td>@Html.DisplayFor(model => model.Transactions[i].Location.LocationId)</td>
                                    <td>@Html.DisplayFor(model => model.Transactions[i].Location.QuantityOnHand)</td>
                                    <td>
                                        <div class="col-md-2 col-sm-3">
                                            @Html.EditorFor(model => model.Transactions[i].HandOutQuantity, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Transactions[i].HandOutQuantity, "", new { @class = "text-danger" })
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="row">
                        
                            @*@Html.LabelFor(model => model.DepartmentId, "Department", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.DropDownList("DepartmentId", null, "Select...", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
                            </div>*@
                        <div class="col-md-2 col-sm-3 text-right">
                            <label class="control-label">Department</label>
                            @Html.HiddenFor(model => model.DepartmentId)
                            @*<div class="dx-field-value">
                                
                            </div>*@
                        </div>
                        <div class="col-md-5 col-sm-5">
                            <div id="gridBox"></div>
                        </div>
                        @*<div class="col-md-6">
                            <div class="dx-fieldset">
                                <div class="dx-field">
                                    
                                    
                                </div>
                            </div>
                        </div>*@
                        
                            <div class="col-md-2">
                                <input type="submit" value="Hand Out" class="btn btn-default" />
                            </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back to List", "HandoutIndex", "Items")
</div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        <script type="text/javascript">
            $(function () {
                var departments = new DevExpress.data.CustomStore({
                    key: "Name",
                    loadMode: "raw",
                    load: function () {
                        var d = new $.Deferred();
                        $.ajax({
                            url: "/Departments/HandoutData",
                            type: "GET",
                            success: function (result) {
                                console.log(result);
                                d.resolve(result);
                            },
                            error: function (resp) {
                                console.log(resp);
                            }

                        });
                        return d.promise();
                    },
                    //byKey: function (key) {
                    //    console.log("bykey hit");
                    //    return { id: key, name: key };
                   // }
                    //key: "Name",
                    //load: function (loadOptions) {
                    //    $.ajax({
                    //        url: "/Departments/HandoutData",
                    //        type: "GET",
                    //        success: function (result) {
                    //            console.log(result);
                    //            return result;
                    //        }
                    //    })
                    //},
                    //byKey: function (key) {
                    //    return { id: key };
                    //}
                })
                $("#gridBox").dxDropDownBox({
                    //accessKey: "Department_Id",
                    //value: "3AI00",
                    //valueExpr: "Name",
                    placeholder: "Select a department...",
                    displayExpr: function (item) {
                        if (item) {
                            return item.Name + " (" + item.Description + ")";
                        }
                        return "";
                        
                    },
                    //elementAttr:{id: "DepartmentId"},
                    showClearButton: true,
                    dataSource: departments,//makeAsyncDataSource("customers.json"),
                    contentTemplate: function (e) {
                        var value = e.component.option("value"),
                            $dataGrid = $("<div>").dxDataGrid({
                                dataSource: e.component.option("dataSource"),
                                columns: [
                                    { dataField: "Name", width:75},
                                    { dataField: "Description"}
                                ],
                                hoverStateEnabled: true,
                                //paging: { enabled: true, pageSize: 10 },
                                //filterRow: { visible: true },
                                scrolling: { mode: "infinite" },
                                height: 265,
                                selection: { mode: "single" },
                                selectedRowKeys: [value],
                                onSelectionChanged: function (selectedItems) {
                                    var keys = selectedItems.selectedRowKeys,
                                        hasSelection = keys.length;
                                    if (hasSelection) {
                                        e.component.option("value", hasSelection ? keys[0] : null);
                                        $('#DepartmentId').val(hasSelection ? keys[0] : null);
                                        console.log(e.component.option("value"));
                                    }
                                    
                                }
                            });

                        dataGrid = $dataGrid.dxDataGrid("instance");

                        e.component.on("valueChanged", function (args) {
                            dataGrid.selectRows(args.value, false);
                        });

                        return $dataGrid;
                    }
                });
            });
            


            



            $('#ItemId').change(function (event) {
                $.ajax({
                    url: "/Items/Transaction",
                    type: "GET",
                    data: {
                        id: $('#ItemId').val()
                    },
                    dataType: "JSON"
                }).done(function (response) {
                    console.log(response);
                    $('#ItemName').val(response.Name);
                    $('#ItemUnit').val(response.Unit);
                    $('#ItemPrice').val(response.Price);
                    getLocations();
                }).fail(function (xhr, status, errorThrown) {
                    console.log("Error: " + errorThrown);
                    console.log("Status: " + status);
                    console.dir(xhr);
                });
            });

            function getLocations() {
                $('#LocationId').find('option').remove().end();
                $.ajax({
                    url: "/Inventory/Transaction",
                    type: "GET",
                    data: {
                        id: $('#ItemId').val()
                    },
                    dataType: "JSON"
                }).done(function (response) {
                    console.log(response);
                    for (var i = 0; i < response.length; i++) {
                        $('#LocationId').append('<option value=' + response[i] + '>' + response[i] + '</option>');
                    }
                }).fail(function (xhr, status, errorThrown) {
                    console.log("Error: " + errorThrown);
                    console.log("Status: " + status);
                    console.dir(xhr);
                });
            }
        </script>
    }
