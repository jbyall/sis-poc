@model SIS.Web.Models.TransactionViewModel

@{
    ViewBag.Title = "Hand Out";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Handout Transaction</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <hr />
    <div class="form-horizontal">
        @Html.HiddenFor(model => model.ItemId)
        @Html.HiddenFor(model => model.ItemPrice)

        @Html.HiddenFor(model => model.LocationType)
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="panel-group">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <div class="row">
                        <div class="col-md-10">
                            <h3>Item Details</h3>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 col-sm-3">
                            @Html.LabelFor(model => model.ItemId, "Item Number", htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.ItemId)
                        </div>
                        <div class="col-md-3 col-sm-3">
                            @Html.LabelFor(model => model.ItemName, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.ItemName)
                        </div>
                        <div class="col-md-3 col-sm-3">
                            @Html.LabelFor(model => model.ItemUnit, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.ItemUnit)
                        </div>
                        <div class="col-md-3 col-sm-3">
                            @Html.LabelFor(model => model.ItemPrice, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DisplayFor(model => model.ItemPrice)
                        </div>
                    </div>
                </div>
                <div class="panel-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Location</th>
                                <th>Qty On Hand</th>
                                <th>Hand Out Qty</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.Transactions.Count; i++)
                            {
                                if (Model.Transactions[i].Location.QuantityOnHand > 0)
                                {
                                    @Html.HiddenFor(model => model.Transactions[i].Location.LocationId)
                                    <tr>
                                        <td>@Html.DisplayFor(model => model.Transactions[i].Location.LocationId)</td>
                                        <td>@Html.DisplayFor(model => model.Transactions[i].Location.QuantityOnHand)</td>
                                        <td>
                                            <div class="col-md-2 col-sm-3">
                                                @Html.EditorFor(model => model.Transactions[i].QuantityChange, new { htmlAttributes = new { @class = "form-control", @min = 0 } })
                                                @Html.ValidationMessageFor(model => model.Transactions[i].QuantityChange, "", new { @class = "text-danger" })
                                            </div>
                                        </td>
                                    </tr>
                                }

                            }
                        </tbody>
                    </table>
                    <div class="row">
                        <div class="col-md-2 col-sm-3 text-right">
                            <label class="control-label">Department</label>
                            @Html.HiddenFor(model => model.DepartmentId)
                        </div>
                        <div class="col-md-5 col-sm-5">
                            <div id="gridBox"></div>
                            <p id="dept-description" hidden="hidden" style="color:#a6a6a6"></p>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-2 col-sm-2">
            <a href="/Items/HandoutIndex" class="btn btn-default"><span class="glyphicon glyphicon-arrow-left"></span> Back To List</a>
        </div>
        <div id="continue-container" class="pull-right">
            <input id="handout-button" type="submit" value="Hand Out" class="btn btn-success" style="margin-right:15px;" disabled />
        </div>
    </div>
    <div id="continue-message" class="row pull-right help-block" style="display:none;">
        <p>Select department to continue.</p>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(function () {
            var departments = new DevExpress.data.CustomStore({
                key: "Id",
                loadMode: "raw",
                load: function () {
                    var d = new $.Deferred();
                    $.ajax({
                        url: "/Departments/HandoutData",
                        type: "GET",
                        success: function (result) {
                            //console.log(result);
                            d.resolve(result);
                        },
                        error: function (resp) {
                            console.log(resp);
                        }

                    });
                    return d.promise();
                },
            })
            $("#gridBox").dxDropDownBox({
                placeholder: "Select a department...",
                displayExpr: function (item) {
                    if (item) {
                        $('#dept-description').html(item.Description);
                        $('#dept-description').show();
                        return item.Id;
                    }
                    return "";

                },
                showClearButton: true,
                dataSource: departments,
                contentTemplate: function (e) {
                    var value = e.component.option("value"),
                        $dataGrid = $("<div>").dxDataGrid({
                            dataSource: e.component.option("dataSource"),
                            columns: [
                                { caption: "Dept", dataField: "Id", width: 75 },
                                { dataField: "Description" }
                            ],
                            hoverStateEnabled: true,
                            scrolling: { mode: "infinite" },
                            height: 265,
                            selection: { mode: "single" },
                            selectedRowKeys: [value],
                            onSelectionChanged: function (selectedItems) {
                                var keys = selectedItems.selectedRowKeys;
                                hasSelection = keys.length;
                                if (hasSelection) {
                                    e.component.option("value", hasSelection ? keys[0] : null);
                                    $('#DepartmentId').val(hasSelection ? keys[0] : null);
                                    //console.log(e.component.option("value"));
                                    $('#handout-button').removeAttr('disabled');

                                }
                                else {
                                    $('#handout-button').attr('disabled', 'disabled');
                                    $('#dept-description').hide();
                                    $('#DepartmentId').val(null);
                                }

                            }
                        });

                    dataGrid = $dataGrid.dxDataGrid("instance");

                    e.component.on("valueChanged", function (args) {
                        dataGrid.selectRows(args.value, false);
                    });

                    return $dataGrid;
                }
            });

            $('#continue-container').mouseenter(function () {
                if (!$('#DepartmentId').val()) {
                    $('#continue-message').show();
                }
            });

            $('#continue-container').mouseleave(function () {

                $('#continue-message').hide();
            })
        });





            // Needed only if user can search for items on this view

            //$('#ItemId').change(function (event) {
            //    $.ajax({
            //        url: "/Items/Transaction",
            //        type: "GET",
            //        data: {
            //            id: $('#ItemId').val()
            //        },
            //        dataType: "JSON"
            //    }).done(function (response) {
            //        console.log(response);
            //        $('#ItemName').val(response.Name);
            //        $('#ItemUnit').val(response.Unit);
            //        $('#ItemPrice').val(response.Price);
            //        getLocations();
            //    }).fail(function (xhr, status, errorThrown) {
            //        console.log("Error: " + errorThrown);
            //        console.log("Status: " + status);
            //        console.dir(xhr);
            //    });
            //});

            //function getLocations() {
            //    $('#LocationId').find('option').remove().end();
            //    $.ajax({
            //        url: "/Inventory/Transaction",
            //        type: "GET",
            //        data: {
            //            id: $('#ItemId').val()
            //        },
            //        dataType: "JSON"
            //    }).done(function (response) {
            //        console.log(response);
            //        for (var i = 0; i < response.length; i++) {
            //            $('#LocationId').append('<option value=' + response[i] + '>' + response[i] + '</option>');
            //        }
            //    }).fail(function (xhr, status, errorThrown) {
            //        console.log("Error: " + errorThrown);
            //        console.log("Status: " + status);
            //        console.dir(xhr);
            //    });
            //}
    </script>
}
